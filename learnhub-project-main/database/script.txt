-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.alembic_version
(
    version_num character varying(32) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num)
);

CREATE TABLE IF NOT EXISTS public.answers
(
    answer_id uuid NOT NULL,
    question_id uuid NOT NULL,
    answer_content character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    answer_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    user_id uuid NOT NULL,
    CONSTRAINT answers_pkey PRIMARY KEY (answer_id)
);

CREATE TABLE IF NOT EXISTS public.category
(
    category_id uuid NOT NULL,
    category_name character varying(300) COLLATE pg_catalog."default" NOT NULL,
    category_created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT category_pkey PRIMARY KEY (category_id),
    CONSTRAINT category_category_name_key UNIQUE (category_name)
);

CREATE TABLE IF NOT EXISTS public.contents
(
    content_id uuid NOT NULL,
    course_id uuid NOT NULL,
    content_name character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    content_doc_path character varying(500) COLLATE pg_catalog."default" NOT NULL,
    content_video_path character varying(500) COLLATE pg_catalog."default" NOT NULL,
    content_quiz_path character varying(500) COLLATE pg_catalog."default",
    content_assignment_path character varying(500) COLLATE pg_catalog."default",
    content_created_at timestamp with time zone DEFAULT now(),
    content_video_duration character varying(5) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT contents_pkey PRIMARY KEY (content_id)
);

CREATE TABLE IF NOT EXISTS public.courses
(
    course_id uuid NOT NULL,
    course_name character varying(500) COLLATE pg_catalog."default" NOT NULL,
    course_description character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    course_instructor_id uuid NOT NULL,
    category_id uuid NOT NULL,
    course_price numeric(10, 2) NOT NULL,
    course_created_at timestamp with time zone NOT NULL,
    course_img text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT courses_pkey PRIMARY KEY (course_id),
    CONSTRAINT courses_course_name_key UNIQUE (course_name)
);

CREATE TABLE IF NOT EXISTS public.email_update_request
(
    request_id uuid NOT NULL,
    email character varying(400) COLLATE pg_catalog."default" NOT NULL,
    requested_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expire_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT email_update_request_pkey PRIMARY KEY (request_id),
    CONSTRAINT email_update_request_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.enrollments
(
    enrollment_id uuid NOT NULL,
    user_id uuid NOT NULL,
    course_id uuid NOT NULL,
    payment_id uuid NOT NULL,
    enroll_date date DEFAULT CURRENT_DATE,
    CONSTRAINT enrollments_pkey PRIMARY KEY (enrollment_id),
    CONSTRAINT enrollments_payment_id_key UNIQUE (payment_id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    notification_id uuid NOT NULL,
    user_id uuid NOT NULL,
    notification_title character varying(500) COLLATE pg_catalog."default" NOT NULL,
    notification_message text COLLATE pg_catalog."default" NOT NULL,
    notification_read_status boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    is_deleted boolean DEFAULT false
);

CREATE TABLE IF NOT EXISTS public.otps
(
    otp_id uuid NOT NULL,
    email character varying(400) COLLATE pg_catalog."default" NOT NULL,
    otp character varying(4) COLLATE pg_catalog."default" NOT NULL,
    generated_at timestamp with time zone NOT NULL DEFAULT now(),
    expire_at timestamp with time zone NOT NULL DEFAULT (now() + '00:05:00'::interval),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT otps_pkey PRIMARY KEY (otp_id),
    CONSTRAINT otps_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.payments
(
    payment_id uuid NOT NULL,
    price numeric(10, 2) NOT NULL,
    payment_mode character varying(100) COLLATE pg_catalog."default" NOT NULL,
    payment_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT payments_pkey PRIMARY KEY (payment_id)
);

CREATE TABLE IF NOT EXISTS public.progress
(
    progress_id uuid NOT NULL,
    user_id uuid NOT NULL,
    course_id uuid NOT NULL,
    content_id uuid NOT NULL,
    progress_percentage numeric(5, 2) NOT NULL,
    progress_update_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT progress_pkey PRIMARY KEY (progress_id)
);

CREATE TABLE IF NOT EXISTS public.questions
(
    question_id uuid NOT NULL,
    user_id uuid NOT NULL,
    course_id uuid NOT NULL,
    question_content character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    question_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT questions_pkey PRIMARY KEY (question_id)
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    review_id uuid NOT NULL,
    user_id uuid NOT NULL,
    course_id uuid NOT NULL,
    review_content character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    review_rating integer,
    review_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT reviews_pkey PRIMARY KEY (review_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    role_id uuid NOT NULL,
    role_name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (role_id),
    CONSTRAINT roles_role_name_key UNIQUE (role_name)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id uuid NOT NULL,
    user_name character varying(400) COLLATE pg_catalog."default" NOT NULL,
    user_email character varying(400) COLLATE pg_catalog."default" NOT NULL,
    user_phone_number character varying(15) COLLATE pg_catalog."default" NOT NULL,
    user_password character varying(300) COLLATE pg_catalog."default" NOT NULL,
    user_address character varying(600) COLLATE pg_catalog."default" NOT NULL,
    user_role uuid NOT NULL,
    user_created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    user_updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    user_img text COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_user_email_key UNIQUE (user_email),
    CONSTRAINT users_user_phone_number_key UNIQUE (user_phone_number)
);

CREATE TABLE IF NOT EXISTS public.wishlist
(
    wishlist_id uuid NOT NULL,
    user_id uuid NOT NULL,
    course_id uuid NOT NULL,
    added_at timestamp with time zone DEFAULT now(),
    CONSTRAINT wishlist_pkey PRIMARY KEY (wishlist_id)
);

ALTER TABLE IF EXISTS public.answers
    ADD CONSTRAINT answers_question_id_fkey FOREIGN KEY (question_id)
    REFERENCES public.questions (question_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.answers
    ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.contents
    ADD CONSTRAINT contents_courser_id_fkey FOREIGN KEY (course_id)
    REFERENCES public.courses (course_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.courses
    ADD CONSTRAINT category_fk FOREIGN KEY (category_id)
    REFERENCES public.category (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.courses
    ADD CONSTRAINT instructor_fk FOREIGN KEY (course_instructor_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.enrollments
    ADD CONSTRAINT course_fk FOREIGN KEY (course_id)
    REFERENCES public.courses (course_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.enrollments
    ADD CONSTRAINT payment_fk FOREIGN KEY (payment_id)
    REFERENCES public.payments (payment_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS enrollments_payment_id_key
    ON public.enrollments(payment_id);


ALTER TABLE IF EXISTS public.enrollments
    ADD CONSTRAINT user_fk FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.progress
    ADD CONSTRAINT progress_content_id_fkey FOREIGN KEY (content_id)
    REFERENCES public.contents (content_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.progress
    ADD CONSTRAINT progress_course_id_fkey FOREIGN KEY (course_id)
    REFERENCES public.courses (course_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.progress
    ADD CONSTRAINT progress_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.questions
    ADD CONSTRAINT questions_course_id_fkey FOREIGN KEY (course_id)
    REFERENCES public.courses (course_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.questions
    ADD CONSTRAINT questions_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT reviews_course_id_fkey FOREIGN KEY (course_id)
    REFERENCES public.courses (course_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT reviews_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT users_user_role_fkey FOREIGN KEY (user_role)
    REFERENCES public.roles (role_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.wishlist
    ADD CONSTRAINT wishlist_course_id_fkey FOREIGN KEY (course_id)
    REFERENCES public.courses (course_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.wishlist
    ADD CONSTRAINT wishlist_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;